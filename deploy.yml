---
- name: Test
  hosts: localhost
  vars:
    - package:
      - 'python3-pip'      
      - 'docker.io'
    - deploy_container_port: '5000'
    - deploy_version: '0.1-2'

  tasks:

  - name: Make sure the packages are present
    apt:
      name: '{{ package }}'
      state: present
      cache_valid_time: 10000

  - name: Make sure the docker-py is present 
    pip:
      name: docker
      executable: pip3

  - name: running container id request
    ansible.builtin.command: 'docker ps -aq'
    register: container_id
    ignore_errors: true

  - name: Set running_container_id
    ansible.builtin.set_fact:
      running_container_id: '{{ container_id.stdout }}'

  - name: running container port request
    ansible.builtin.command: 'docker port {{ running_container_id }}'
    register: container_port
    ignore_errors: true

  - name: Set running_container_port
    ansible.builtin.set_fact:
      running_container_port: '{{ container_port.stdout.split(":")[-1] }}'

  - name: Show running_container_id
    ansible.builtin.debug:
      var: running_container_id

  - name: Show running_container_port
    ansible.builtin.debug:
      var: running_container_port

  - name: Set deploy_container_port
    ansible.builtin.set_fact:
      deploy_container_port: '5001'
    when: running_container_port == '5000'

  - name: Show deploy_container_port
    ansible.builtin.debug:
      var: deploy_container_port

  - name: Start deploy container
    docker_container:
      name: 'backend-{{ deploy_version }}-{{ deploy_container_port }}'
      image: 'backend:{{ deploy_version }}'
      state: 'started'
      restart_policy: 'on-failure'
      ports:
        - '127.0.0.1:{{ deploy_container_port }}:5000'

  - name: Check deploy
    block:
    - name: Verify that the new container is serving traffic
      ansible.builtin.uri:
        url: 'http://127.0.0.1:{{ deploy_container_port }}'
        status_code: 200
      register: container_status
      retries: 5
      delay: 2
      until: "container_status.status == 200"

    rescue:
    - name: 'Terminate failed container'
      ansible.builtin.shell: 'docker stop backend-{{ deploy_version }}-{{ deploy_container_port }} ; docker rm --force backend-{{ deploy_version }}-{{ deploy_container_port }}'
      ignore_errors: 'yes'

  - name: Show container_status.status
    ansible.builtin.debug:
      var: container_status.status

  - name: Ensure the nginx config is present & enabled
    block:
    - name: Ensure the nginx config is present
      ansible.builtin.template:
        src: "nginx.conf.j2"
        dest: "/etc/nginx/sites-available/backend.conf"
        mode: '0644'
      notify:
        - restart nginx

    - name: Ensure the nginx config is enabled
      ansible.builtin.file:
        dest: "/etc/nginx/sites-enabled/backend.conf"
        src: "/etc/nginx/sites-available/backend.conf"
        state: link
      notify:
        - restart nginx
    when: container_status.status == '200'

  - name: Ensure the running container is destroy
    ansible.builtin.shell: 'docker stop {{ running_container_id }} ; docker rm --force {{ running_container_id }}'
    ignore_errors: 'yes'
    when: container_status.status == '200'

  handlers:
    - name: restart nginx
      become: yes
      service:
        name: nginx
        state: restarted
